{"version":3,"sources":["Components/AddTask.js","Components/Task.js","Components/TaskList.js","Components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","user","date","handlerDate","e","setState","target","value","handlerText","handlerCheckBox","handlerUser","console","log","handlerClick","props","addTask","type","placeholder","this","onChange","id","htmlFor","min","max","change","onClick","Component","ChangeUser","name","style","color","Task","task","start","important","stop","startDate","stopDate","startDat","toLocaleString","stopDat","changeStop","delete","TaskList","active","tasks","filter","during","dane","activeTask","map","key","changeUser","duringTask","daneTask","className","length","App","counter","finishDate","deleteTask","index","indexOf","splice","changeTaskStatus","forEach","getTime","changeTaskStatusStop","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2df1060c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    user: \"\",\r\n    date: this.minDate,\r\n  };\r\n  handlerDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value,\r\n    });\r\n  };\r\n  handlerText = (e) => {\r\n    this.setState({\r\n      text: e.target.value,\r\n    });\r\n  };\r\n  handlerCheckBox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked,\r\n    });\r\n  };\r\n  handlerUser = (e) => {\r\n    console.log(e.target.value);\r\n    this.setState({\r\n      user: e.target.value,\r\n    });\r\n  };\r\n\r\n  handlerClick = () => {\r\n    const { text, date, checked, user } = this.state;\r\n    const add = this.props.addTask(text, date, checked, user);\r\n    if (!add) {\r\n      this.setState({\r\n        text: \"\",\r\n        checked: false,\r\n        user: \"\",\r\n        date: this.minDate,\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"dodaj zadanie\"\r\n          value={this.state.text}\r\n          onChange={this.handlerText}\r\n        />\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={this.state.checked}\r\n          id=\"inportend\"\r\n          onChange={this.handlerCheckBox}\r\n        />\r\n        <label htmlFor=\"inportand\">Na cito</label>\r\n\r\n        <label htmlFor=\"data\">Do kiedy zrobić</label>\r\n        <input\r\n          type=\"date\"\r\n          value={this.state.date}\r\n          min={this.minDate}\r\n          max=\"2021-12-31\"\r\n          onChange={this.handlerDate}\r\n        />\r\n        <ChangeUser change={this.handlerUser} />\r\n        <button onClick={this.handlerClick}>Dodaj</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst ChangeUser = (props) => (\r\n  <>\r\n    <select name=\"nazwa\" onChange={props.change}>\r\n      <option value=\"\">Wybierz os.</option>\r\n      <option value=\"Dorcia\">Dorcia</option>\r\n      <option value=\"Aśka\">Aśka</option>\r\n      <option value=\"Marlenka\">Marlenka</option>\r\n      <option value=\"Aneta\">Aneta</option>\r\n      <option value=\"Ewelina\">Ewelina</option>\r\n      <option value=\"Agnieszka\">Agnieszka</option>\r\n      <option value=\"Kaśka\">Kaśka</option>\r\n      (...)\r\n    </select>\r\n  </>\r\n);\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\nconst style = {\r\n  color: \"red\",\r\n};\r\n\r\nconst Task = (props) => {\r\n  const {\r\n    text,\r\n    date,\r\n    id,\r\n    start,\r\n    important,\r\n    stop,\r\n    startDate,\r\n    stopDate,\r\n    user,\r\n  } = props.task;\r\n  const startDat = new Date(startDate).toLocaleString();\r\n  const stopDat = new Date(stopDate).toLocaleString();\r\n\r\n  if (!start && !stop) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong> - do\r\n          <span>{date}</span>\" \"<span>{user}</span>\r\n          <button onClick={() => props.change(id)}>Rozpocznij</button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else if (start && !stop) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong>{text}</strong> - rozpoczete o <span>{startDat}</span>\" \"\r\n          <span>{user}</span>\r\n          <button onClick={() => props.changeStop(id)}>Zakończ</button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong>{text}</strong> - rozpoczete o <span>{startDat}</span>\r\n          zakończone o <span>{stopDat}</span>\" \"<span>{user}</span>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\nconst TaskList = props => {\r\n  const active = props.tasks.filter(task => !task.start && !task.stop);\r\n  const during = props.tasks.filter(task => task.start && !task.stop);\r\n  const dane = props.tasks.filter(task => task.start && task.stop);\r\n  const activeTask = active.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n      changeUser={props.changeUser}\r\n    />\r\n  ));\r\n  const duringTask = during.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      changeStop={props.changeStop}\r\n      changeUser={props.changeUser}\r\n    />\r\n  ));\r\n  const daneTask = dane.map(task => <Task key={task.id} task={task} />);\r\n  return (\r\n    <>\r\n      <div className=\"active\">\r\n        <h1>Zadania do zrobienia</h1>\r\n        {activeTask.length > 0 ? activeTask : <p>pakuj kredki i do domu</p>}\r\n      </div>\r\n      <div className=\"during\">\r\n        <h1>Zadania w trakcie realizacji</h1>\r\n        {duringTask}\r\n      </div>\r\n      <div className=\"dane\">\r\n        <h1>Zadania zrobione</h1>\r\n        {daneTask}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\nclass App extends Component {\n  counter = 2;\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: \"Wylizać patelkę\",\n        date: \"2020-02-25\",\n        important: true,\n        start: false,\n        stop: false,\n        startDate: null,\n        finishDate: null,\n        user: \"Dorota\",\n      },\n      {\n        id: 1,\n        text: \"Wypić piwo\",\n        date: \"2020-02-25\",\n        important: false,\n        start: false,\n        stop: false,\n        startDate: null,\n        finishDate: null,\n        user: \"Dorota\",\n      },\n    ],\n  };\n  deleteTask = (id) => {\n    console.log(\"delete\" + id);\n    const tasks = [...this.state.tasks];\n    const index = tasks.indexOf((task) => task.id === id);\n    tasks.splice(index, 1);\n    this.setState({\n      tasks,\n    });\n  };\n  changeTaskStatus = (id) => {\n    //console.log(\"dane\" + id);\n    const tasks = [...this.state.tasks];\n    tasks.forEach((task) => {\n      if (task.id === id) {\n        task.start = true;\n        task.startDate = new Date().getTime();\n        task.important = false;\n        this.setState({\n          tasks,\n        });\n      }\n    });\n  };\n  changeTaskStatusStop = (id) => {\n    const tasks = [...this.state.tasks];\n    tasks.forEach((task) => {\n      if (task.id === id) {\n        task.stop = true;\n        task.stopDate = new Date().getTime();\n        this.setState({\n          tasks,\n        });\n      }\n    });\n  };\n  changeUser = (e, id) => {\n    console.log(e.target.value, id);\n    const tasks = [...this.state.tasks];\n    tasks.forEach((task) => {\n      if (task.id === id) {\n        task.user = e.target.value;\n        this.setState({\n          user: task.user,\n        });\n      }\n    });\n  };\n\n  addTask = (text, date, important, user) => {\n    const task = {\n      id: this.counter,\n      text: text,\n      date: date,\n      important: important,\n      start: false,\n      stop: false,\n      startDate: null,\n      finishDate: null,\n      user: user,\n    };\n    this.setState((prevState) => ({\n      tasks: [...prevState.tasks, task],\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Zadania Dr. Max</h1>\n        <AddTask addTask={this.addTask} />\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n          changeStop={this.changeTaskStatusStop}\n          changeUser={this.changeUser}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}